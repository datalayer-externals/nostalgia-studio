/**
 * Design Tokens
 * Autogenerated from tokens.json.
 * DO NOT EDIT!
 */

import {
  ColorToken,
  DimensionToken,
  FontToken,
  ParsedColorToken,
  ParsedDimensionToken,
  ParsedFontToken,
} from '@cobalt-ui/core';

export declare const tokens: {
  'palette.black': ColorToken['$value'];
  'palette.white': ColorToken['$value'];
  'palette.gray0': ColorToken['$value'];
  'palette.gray1': ColorToken['$value'];
  'palette.gray2': ColorToken['$value'];
  'palette.gray3': ColorToken['$value'];
  'palette.gray4': ColorToken['$value'];
  'palette.gray5': ColorToken['$value'];
  'palette.gray6': ColorToken['$value'];
  'palette.gray7': ColorToken['$value'];
  'palette.gray8': ColorToken['$value'];
  'palette.gray9': ColorToken['$value'];
  'palette.green0': ColorToken['$value'];
  'palette.green1': ColorToken['$value'];
  'palette.green2': ColorToken['$value'];
  'palette.green3': ColorToken['$value'];
  'palette.green4': ColorToken['$value'];
  'palette.green5': ColorToken['$value'];
  'palette.green6': ColorToken['$value'];
  'palette.green7': ColorToken['$value'];
  'palette.green8': ColorToken['$value'];
  'palette.green9': ColorToken['$value'];
  'palette.blue0': ColorToken['$value'];
  'palette.blue1': ColorToken['$value'];
  'palette.blue2': ColorToken['$value'];
  'palette.blue3': ColorToken['$value'];
  'palette.blue4': ColorToken['$value'];
  'palette.blue5': ColorToken['$value'];
  'palette.blue6': ColorToken['$value'];
  'palette.blue7': ColorToken['$value'];
  'palette.blue8': ColorToken['$value'];
  'palette.blue9': ColorToken['$value'];
  'palette.coral0': ColorToken['$value'];
  'palette.coral1': ColorToken['$value'];
  'palette.coral2': ColorToken['$value'];
  'palette.coral3': ColorToken['$value'];
  'palette.coral4': ColorToken['$value'];
  'palette.coral5': ColorToken['$value'];
  'palette.coral6': ColorToken['$value'];
  'palette.coral7': ColorToken['$value'];
  'palette.coral8': ColorToken['$value'];
  'palette.coral9': ColorToken['$value'];
  'palette.red0': ColorToken['$value'];
  'palette.red1': ColorToken['$value'];
  'palette.red2': ColorToken['$value'];
  'palette.red3': ColorToken['$value'];
  'palette.red4': ColorToken['$value'];
  'palette.red5': ColorToken['$value'];
  'palette.red6': ColorToken['$value'];
  'palette.red7': ColorToken['$value'];
  'palette.red8': ColorToken['$value'];
  'palette.red9': ColorToken['$value'];
  'color.background': ColorToken['$value'];
  'color.text.body': ColorToken['$value'];
  'color.text.muted': ColorToken['$value'];
  'color.text.error': ColorToken['$value'];
  'color.text.link': ColorToken['$value'];
  'spacing.spacer0': DimensionToken['$value'];
  'spacing.spacerXs': DimensionToken['$value'];
  'spacing.spacerS': DimensionToken['$value'];
  'spacing.spacerM': DimensionToken['$value'];
  'spacing.spacerX': DimensionToken['$value'];
  'spacing.spacerXl': DimensionToken['$value'];
  'spacing.spacerXxl': DimensionToken['$value'];
  'font.family.system': FontToken['$value'];
  'font.family.monospace': FontToken['$value'];
  'font.family.display': FontToken['$value'];
  'font.family.size.f00': DimensionToken['$value'];
  'font.family.size.f0': DimensionToken['$value'];
  'font.family.size.f1': DimensionToken['$value'];
  'font.family.size.f2': DimensionToken['$value'];
  'font.family.size.f3': DimensionToken['$value'];
  'font.family.size.f4': DimensionToken['$value'];
  'font.family.size.f5': DimensionToken['$value'];
  'font.family.size.f6': DimensionToken['$value'];
  'font.family.lineHeight.default': DimensionToken['$value'];
  'font.family.lineHeight.condensed': DimensionToken['$value'];
  'font.family.lineHeight.condensedUltra': DimensionToken['$value'];
};

export declare const meta: {
  'palette.black': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.black'] };
  };
  'palette.white': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.white'] };
  };
  'palette.gray0': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.gray0'] };
  };
  'palette.gray1': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.gray1'] };
  };
  'palette.gray2': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.gray2'] };
  };
  'palette.gray3': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.gray3'] };
  };
  'palette.gray4': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.gray4'] };
  };
  'palette.gray5': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.gray5'] };
  };
  'palette.gray6': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.gray6'] };
  };
  'palette.gray7': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.gray7'] };
  };
  'palette.gray8': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.gray8'] };
  };
  'palette.gray9': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.gray9'] };
  };
  'palette.green0': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.green0'] };
  };
  'palette.green1': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.green1'] };
  };
  'palette.green2': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.green2'] };
  };
  'palette.green3': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.green3'] };
  };
  'palette.green4': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.green4'] };
  };
  'palette.green5': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.green5'] };
  };
  'palette.green6': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.green6'] };
  };
  'palette.green7': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.green7'] };
  };
  'palette.green8': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.green8'] };
  };
  'palette.green9': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.green9'] };
  };
  'palette.blue0': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.blue0'] };
  };
  'palette.blue1': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.blue1'] };
  };
  'palette.blue2': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.blue2'] };
  };
  'palette.blue3': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.blue3'] };
  };
  'palette.blue4': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.blue4'] };
  };
  'palette.blue5': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.blue5'] };
  };
  'palette.blue6': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.blue6'] };
  };
  'palette.blue7': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.blue7'] };
  };
  'palette.blue8': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.blue8'] };
  };
  'palette.blue9': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.blue9'] };
  };
  'palette.coral0': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.coral0'] };
  };
  'palette.coral1': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.coral1'] };
  };
  'palette.coral2': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.coral2'] };
  };
  'palette.coral3': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.coral3'] };
  };
  'palette.coral4': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.coral4'] };
  };
  'palette.coral5': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.coral5'] };
  };
  'palette.coral6': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.coral6'] };
  };
  'palette.coral7': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.coral7'] };
  };
  'palette.coral8': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.coral8'] };
  };
  'palette.coral9': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.coral9'] };
  };
  'palette.red0': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.red0'] };
  };
  'palette.red1': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.red1'] };
  };
  'palette.red2': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.red2'] };
  };
  'palette.red3': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.red3'] };
  };
  'palette.red4': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.red4'] };
  };
  'palette.red5': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.red5'] };
  };
  'palette.red6': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.red6'] };
  };
  'palette.red7': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.red7'] };
  };
  'palette.red8': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.red8'] };
  };
  'palette.red9': ParsedColorToken & {
    $extensions: { mode: typeof modes['palette.red9'] };
  };
  'color.background': ParsedColorToken;
  'color.text.body': ParsedColorToken;
  'color.text.muted': ParsedColorToken;
  'color.text.error': ParsedColorToken;
  'color.text.link': ParsedColorToken;
  'spacing.spacer0': ParsedDimensionToken;
  'spacing.spacerXs': ParsedDimensionToken;
  'spacing.spacerS': ParsedDimensionToken;
  'spacing.spacerM': ParsedDimensionToken;
  'spacing.spacerX': ParsedDimensionToken;
  'spacing.spacerXl': ParsedDimensionToken;
  'spacing.spacerXxl': ParsedDimensionToken;
  'font.family.system': ParsedFontToken;
  'font.family.monospace': ParsedFontToken;
  'font.family.display': ParsedFontToken;
  'font.family.size.f00': ParsedDimensionToken & {
    $extensions: { mode: typeof modes['font.family.size.f00'] };
  };
  'font.family.size.f0': ParsedDimensionToken & {
    $extensions: { mode: typeof modes['font.family.size.f0'] };
  };
  'font.family.size.f1': ParsedDimensionToken & {
    $extensions: { mode: typeof modes['font.family.size.f1'] };
  };
  'font.family.size.f2': ParsedDimensionToken & {
    $extensions: { mode: typeof modes['font.family.size.f2'] };
  };
  'font.family.size.f3': ParsedDimensionToken & {
    $extensions: { mode: typeof modes['font.family.size.f3'] };
  };
  'font.family.size.f4': ParsedDimensionToken & {
    $extensions: { mode: typeof modes['font.family.size.f4'] };
  };
  'font.family.size.f5': ParsedDimensionToken & {
    $extensions: { mode: typeof modes['font.family.size.f5'] };
  };
  'font.family.size.f6': ParsedDimensionToken & {
    $extensions: { mode: typeof modes['font.family.size.f6'] };
  };
  'font.family.lineHeight.default': ParsedDimensionToken;
  'font.family.lineHeight.condensed': ParsedDimensionToken;
  'font.family.lineHeight.condensedUltra': ParsedDimensionToken;
};

export declare const modes: {
  'palette.black': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.white': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.gray0': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.gray1': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.gray2': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.gray3': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.gray4': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.gray5': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.gray6': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.gray7': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.gray8': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.gray9': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.green0': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.green1': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.green2': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.green3': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.green4': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.green5': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.green6': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.green7': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.green8': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.green9': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.blue0': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.blue1': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.blue2': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.blue3': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.blue4': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.blue5': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.blue6': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.blue7': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.blue8': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.blue9': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.coral0': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.coral1': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.coral2': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.coral3': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.coral4': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.coral5': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.coral6': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.coral7': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.coral8': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.coral9': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.red0': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.red1': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.red2': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.red3': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.red4': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.red5': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.red6': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.red7': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.red8': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'palette.red9': {
    light: ColorToken['$value'];
    dark: ColorToken['$value'];
  };
  'font.family.size.f00': {
    mobile: DimensionToken['$value'];
    desktop: DimensionToken['$value'];
  };
  'font.family.size.f0': {
    mobile: DimensionToken['$value'];
    desktop: DimensionToken['$value'];
  };
  'font.family.size.f1': {
    mobile: DimensionToken['$value'];
    desktop: DimensionToken['$value'];
  };
  'font.family.size.f2': {
    mobile: DimensionToken['$value'];
    desktop: DimensionToken['$value'];
  };
  'font.family.size.f3': {
    mobile: DimensionToken['$value'];
    desktop: DimensionToken['$value'];
  };
  'font.family.size.f4': {
    mobile: DimensionToken['$value'];
    desktop: DimensionToken['$value'];
  };
  'font.family.size.f5': {
    mobile: DimensionToken['$value'];
    desktop: DimensionToken['$value'];
  };
  'font.family.size.f6': {
    mobile: DimensionToken['$value'];
    desktop: DimensionToken['$value'];
  };
};

export declare function token(
  tokenID: keyof typeof tokens,
  modeName?: never,
): typeof tokens[typeof tokenID];
export declare function token(
  tokenID: keyof typeof modes,
  modeName?: keyof typeof modes[typeof tokenID],
): typeof modes[typeof tokenID];
